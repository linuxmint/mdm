#!/usr/bin/env python

import gi
gi.require_version('Gtk', '3.0')
gi.require_version('WebKit', '3.0')
from gi.repository import Gio, Gtk, Gdk, WebKit
import json

class ThemeEmulator:
    def closeApplication(self, widget):
        Gtk.main_quit()

    def __init__(self):
        self.window = Gtk.Window(Gtk.WindowType.TOPLEVEL)
        self.window.connect("destroy", self.closeApplication)
        self.window.set_title("MDM Theme Emulator")
        
        self.userName = None
        
        self.sensitiveItems = []
        self.toolbar = self.createToolbar()
        for item in self.sensitiveItems:
            item.set_sensitive(False)

        sw = Gtk.ScrolledWindow()
        sw.set_policy(Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC)
        
        self.webView = WebKit.WebView()
        settings = self.webView.get_settings()
        settings.set_property('enable-default-context-menu', False)
        self.webView.set_settings(settings)

        sw.add(self.webView)
        sw.show()
        self.sw = sw

        vbox = Gtk.VBox(False, 2)
        vbox.pack_start(self.toolbar, False, False, 0)
        vbox.add(sw)
        self.statusLabel = Gtk.Label("")
        self.statusLabel.set_alignment(0, 0)
        vbox.pack_end(self.statusLabel, False, False, 0)
        self.window.add(vbox)
        self.window.show_all()
        self.setResolution(800, 600)
        
        self.webView.connect("load-finished", self.loadFinished)
        self.webView.connect("script-alert", self.onAlert)
        self.setStatus("Initialized")

        self.isFullscreen = False
        self.isLoaded = False
        self.window.connect('window-state-event', self.onWindowStateChange)
        self.window.connect('motion-notify-event', self.onMotion)
        self.window.connect("key-press-event", self.onWindowKeyPress)
        
    def onWindowStateChange(self, window, event):
        self.isFullscreen = bool(Gdk.WindowState.FULLSCREEN & event.new_window_state)
        if self.isLoaded:
            self.resolutionCombo.set_sensitive(self.isFullscreen == False)
        if self.isFullscreen:
            self.toolbar.hide()
            self.statusLabel.hide()
        else:
            self.toolbar.show()
            self.statusLabel.show()
            

        
    def onMotion(self, window, event):
        if self.isFullscreen:
            if event.y < 2:
                self.toolbar.show()
            else:
                self.toolbar.hide()
            
            width, height = self.window.get_size()
            if event.y > height-2:
                self.statusLabel.show()
            else:
                self.statusLabel.hide()
        
    def onWindowKeyPress(self, widget, event):
        if event.keyval == Gdk.KEY_F11:
            if self.isFullscreen:
                self.window.unfullscreen()
            else:
                self.window.fullscreen()
        elif event.keyval == Gdk.KEY_Escape and self.isFullscreen:
            self.window.unfullscreen()
                
    def setStatus(self, string):
        self.statusLabel.set_text(string)
        
    def createToolbar(self):
        toolbar = Gtk.Toolbar()
        toolbar.set_style(Gtk.ToolbarStyle.TEXT)
        
        # Open
        button = Gtk.ToolButton(Gtk.STOCK_OPEN)
        button.connect('clicked', self.openFile)
        toolbar.add(button)
        
        # Refresh
        button = Gtk.ToolButton(Gtk.STOCK_REFRESH)
        button.connect('clicked', self.refresh)
        self.sensitiveItems.append(button)
        toolbar.add(button)
        
        toolbar.add(Gtk.SeparatorToolItem())
        
        # Resolution
        name_store = Gtk.ListStore(str)
        name_store.append(["1920x1080"])
        name_store.append(["1024x768"])
        name_store.append(["800x600"])
        name_store.append(["640x480"])
        
        self.resolutionCombo = Gtk.ComboBox.new_with_model_and_entry(name_store)
        self.resolutionCombo.set_entry_text_column(0)
        self.resolutionCombo.connect('changed', self.resolutionChanged)
        entry = self.resolutionCombo.get_child()
        entry.connect("key-press-event", self.onResolutionKeyPress)
        entry.set_text("800x600")
        self.sensitiveItems.append(self.resolutionCombo)
        item = Gtk.ToolItem()
        item.add(self.resolutionCombo)
        toolbar.add(item)
        
        toolbar.add(Gtk.SeparatorToolItem())
        
        # Dummies
        button = Gtk.ToolButton(Gtk.STOCK_ADD)
        button.set_label("Add Dummies")
        button.connect('clicked', self.addDummies)
        self.sensitiveItems.append(button)
        toolbar.add(button)
        
        # Add User
        button = Gtk.ToolButton(Gtk.STOCK_ADD)
        button.set_label("Add User")
        button.connect('clicked', self.addUser)
        self.sensitiveItems.append(button)
        toolbar.add(button)
        
        # Add Session
        button = Gtk.ToolButton(Gtk.STOCK_ADD)
        button.set_label("Add Session")
        button.connect('clicked', self.addSession)
        self.sensitiveItems.append(button)
        toolbar.add(button)
        
        return toolbar
        
    def resolutionChanged(self, widget):
        if widget.get_active_iter():
            self.setResolutionFromString(widget.get_child().get_text())
        
    def onResolutionKeyPress(self, widget, event):
        if event.keyval == Gdk.KEY_Return:
            self.setResolutionFromString(widget.get_text())
            
    def setResolutionFromString(self, string):
        data = string.split('x')
        if len(data) == 2:
            width, height = data
            self.setResolution(int(width), int(height))
            self.setStatus("Resolution changed to: " + string)
        else:
            self.setStatus("Wrong resolution format: " + string)

    def setResolution(self, width, height):
        self.sw.set_size_request(width, height)
        self.window.resize(100,100) # force resize to minimum size
        
    def refresh(self, widget):
        self.userName = None
        self.webView.reload()
        self.setStatus("Reloading")
        
    def addDummies(self, widget):
        self.callJavascriptMethod("mdm_add_user", "Jake", "What's this ?")
        self.callJavascriptMethod("mdm_add_user", "Elwood", "What'?")
        self.callJavascriptMethod("mdm_add_session", "Cinnamon", "cinnamon.desktop")
        self.callJavascriptMethod("mdm_add_session", "Mate", "mate.desktop")
        self.callJavascriptMethod("mdm_add_session", "Gnome", "gnome3.desktop")
        self.setStatus("Added 2 dummy users and 3 dummy sessions")
        
    def addSession(self, widget):
        data = self.dialogAskFor("Add a new Session", "Please enter a session name:", "Please enter a desktop filename:")
        if data:
            name, filename = data
            if name != "" and filename != "":
                self.callJavascriptMethod("mdm_add_session", name, filename)
                self.setStatus("Added session: %s / %s" % (name, filename))
            else:
                self.setStatus("Add session failed due to empty field")
        
    def addUser(self, widget):
        data = self.dialogAskFor("Add a new User", "Please enter a user name:", "Please enter gecos:")
        if data:
            name, gecos = data
            if name != "" and gecos != "":
                self.callJavascriptMethod("mdm_add_user", name, gecos)
                self.setStatus("Added user: %s / %s" % (name, gecos))
            else:
                self.setStatus("Add user failed due to empty field")
        
    def dialogAskFor(self, title, *labels):
        message = "test"
        dialogWindow = Gtk.Dialog(title, self.window,
                              Gtk.DialogFlags.MODAL | Gtk.DialogFlags.DESTROY_WITH_PARENT)
                              
        dialogWindow.add_button("Add", Gtk.ResponseType.OK)
        dialogWindow.add_button("Cancel", Gtk.ResponseType.CANCEL)
        dialogWindow.set_title(title)

        dialogBox = dialogWindow.get_content_area()
        
        vbox = Gtk.VBox()
            
        entries = []
        for label in labels:
            entry = Gtk.Entry()
            label = Gtk.Label(label)
            label.set_alignment(0, 0)
            vbox.add(label)
            vbox.add(entry)
            entries.append(entry)
        
        dialogBox.pack_end(vbox, False, False, 0)

        dialogWindow.show_all()
        response = dialogWindow.run()
        
        result = None
        if response == Gtk.ResponseType.OK:
            result = []
            for entry in entries:
                result.append(entry.get_text())
            
        dialogWindow.destroy()
        return result
        
    def openFile(self, widget):
        dialog = Gtk.FileChooserDialog("Please select an mdm theme", self.window,
            Gtk.FileChooserAction.OPEN,
            (Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL,
             Gtk.STOCK_OPEN, Gtk.ResponseType.OK))

        filter_text = Gtk.FileFilter()
        filter_text.set_name("HTML files")
        filter_text.add_mime_type("text/html")
        dialog.add_filter(filter_text)

        response = dialog.run()
        if response == Gtk.ResponseType.OK:
            self.filename = dialog.get_filename()
            self.setStatus("Loading file: " + self.filename)
            self.webView.open(self.filename) 

        dialog.destroy()
        
    def loadFinished(self, *args):
        self.isLoaded = True
        self.userName = None
        if self.sensitiveItems:
            for item in self.sensitiveItems:
                item.set_sensitive(True)

        self.setStatus("Load finished: " + self.filename)
        
    def onAlert(self, view, frame, message):
        data = message.split('###', 1)
        if len(data) == 2:
            action, param = data
            if action == "USER":
                self.userName = param
                self.callJavascriptMethod("mdm_noecho", 'Login as ' + param + ':')
                self.setStatus("Selected user: " + param)
            elif action == "LOGIN":
                if self.userName:
                    self.setStatus("Logged in as %s, with password %s" % (self.userName, param))
                    self.userName = None
                    self.callJavascriptMethod("mdm_prompt", '')
                else:
                    self.userName = param
                    self.setStatus("Entered user: " + param)
                    self.callJavascriptMethod("mdm_noecho", 'Login as ' + param + ':')
            elif action == "SESSION":
                self.setStatus("Session: " + param)
            elif action == "LANGUAGE":
                self.setStatus("Language")
            elif action == "SHUTDOWN":
                self.setStatus("Shutdown")
            elif action == "SUSPEND":
                self.setStatus("Suspend")
            elif action == "RESTART":
                self.setStatus("Restart")
            elif action == "QUIT":
                self.setStatus("Quit")
            elif action == "XDMCP":
                self.setStatus("Xdmcp")
            else:
                self.setStatus('Unrecognized action: ' + action)
            return 1
        
    def callJavascriptMethod(self, method, *arguments):
        jsonData = json.dumps(arguments)
        self.webView.execute_script(method + ".apply(null, " + jsonData + ");");

def main():
    Gtk.main()
    return 0       

if __name__ == "__main__":
    ThemeEmulator()
    main()
